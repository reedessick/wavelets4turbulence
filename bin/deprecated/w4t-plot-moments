#!/usr/bin/env python3

"""a simple script to plot moments in various ways
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np
import h5py

from argparse import ArgumentParser

# non-standard libraries
from w4t.plot import moments as plt

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('inpath', type=str,
    help='path to an HDF file containing moments')

#---

parser.add_argument('--num-std', default=plt.DEFAULT_NUM_STD, type=float,
    help='the number of standard deviations represented by error bars. DEFAULT=1')

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

#---

parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=200, type=int)

parser.add_argument('-o', '--output-dir', default=None, action='store_true')
parser.add_argument('-t', '--tag', default='', type=str)

#---

args = parser.parse_args()

if args.output_dir is None:
    args.output_dir = os.path.dirname(os.path.abspath(args.inpath))
os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

args.verbose |= args.Verbose

#-------------------------------------------------

if args.verbose:
    print('loading moments from: '+args.inpath)

data = dict()
with h5py.File(args.inpath, 'r') as obj:
    for field in obj.keys():
        if args.Verbose:
            print('    loading: '+field)
        data[field] = dict((key, obj[field][key][:]) for key in obj[field].keys())

#-------------------------------------------------

# plot

for field in data.keys():
    if args.verbose:
        print('    processing: '+field)

    #---

    scales = data[field]['scales']
    indexes = data[field]['index'].astype(int)
    mom = data[field]['moments']
    cov = data[field]['covariance']

    if 'poly' in data[field]:
        poly = (data[field]['poly'], data[field]['polybins'])
    else:
        poly = None

    #--------------------

    if args.Verbose:
        print('    plotting "raw" moments')

    fig = plt.moments(scales, indexes, mom, cov, num_std=args.num_std, poly=poly, verbose=args.Verbose)
    fig.gca().set_title(field)

    figtmp = os.path.join(
            args.output_dir,
            '%s_%s_moments%s' % ('.'.join(os.path.basename(args.inpath).split('.')[:-1]), field, args.tag),
    ) + '.%s'

    plt.save(fig, figtmp, args.figtype, verbose=args.verbose, dpi=args.dpi)
    plt.close(fig)

    #--------------------

    if 2 in indexes: # you can plot scaled moments

        if args.Verbose:
            print('    plotting "scaled" moments')

        fig = plt.scaled_moments(scales, indexes, mom, cov, num_std=args.num_std, verbose=args.Verbose)
        fig.gca().set_title(field)

        figtmp = os.path.join(
                args.output_dir,
                '%s_%s_scaled-moments%s' % ('.'.join(os.path.basename(args.inpath).split('.')[:-1]), field, args.tag),
        ) + '.%s'

        plt.save(fig, figtmp, args.figtype, verbose=args.verbose, dpi=args.dpi)
        plt.close(fig)

        #----------------

        if args.Verbose:
            print('    plotting higher moments as a function of second moment')

        fig = plt.extended_intermittency(scales, indexes, mom, cov, num_std=args.num_std, verbose=args.Verbose)
        fig.gca().set_title(field)

        figtmp = os.path.join(
                args.output_dir,
                '%s_%s_extended-intermittency%s' % ('.'.join(os.path.basename(args.inpath).split('.')[:-1]), field, args.tag),
        ) + '.%s'

        plt.save(fig, figtmp, args.figtype, verbose=args.verbose, dpi=args.dpi)
        plt.close(fig)

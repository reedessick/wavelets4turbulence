#!/usr/bin/env python3

"""an executable to compute statistics of structures
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from argparse import ArgumentParser

### non-standard libraries
from w4t.utils import io

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('source', type=str)
parser.add_argument('structure', type=str)

parser.add_argument('--target', type=str, default=None,
    help='if supplied, write the output into this path. Otherwise, will overwrite source')

parser.add_argument('field', type=str)
parser.add_argument('--component', type=int, default=None)

parser.add_argument('-M', '--max-edgelength', default=None, type=int)

#---

parser.add_argument('-w', '--wavelet', default=pywt.DEFAULT_WAVELET, type=str,
    help='if plotting using a command that requires a WaveletArray, use this wavelet')

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')

args = parser.parse_args()

#-------------------------------------------------

# load data

data, field = io.simplify(
    io.load([args.field], path=args.source, verbose=args.verbose)[args.field],
    args.field,
    component=args.component,
    max_edgelength=args.max_edgelength,
    verbose=args.verbose,
)

wa = pywt.PyWaveletArray(data, args.wavelet) # used when extracting data

#-----------

# load structure

structures = io.load_structures(args.structure, verbose=args.verbose)
num_structures = len(structures)

#-------------------------------------------------

raise NotImplementedError('''
iterate through structures and compute properties

write these to disk (big HDF with separate group for each structure)
''')

#!/usr/bin/env python3

"""a simple script to plot moments in various ways
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np
import h5py

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from argparse import ArgumentParser

#-------------------------------------------------

TICK_PARAMS = dict(
    left=True,
    right=True,
    top=True,
    bottom=True,
    direction='in',
    which='both',
)

SUBPLOTS_ADJUST = dict(
    left=0.12,
    right=0.95,
    bottom=0.10,
    top=0.92,
    hspace=0.03,
)

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('inpath', type=str,
    help='path to an HDF file containing moments')

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

#---

parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=200, type=int)

parser.add_argument('-o', '--output-dir', default=None, action='store_true')
parser.add_argument('-t', '--tag', default='', type=str)

#---

args = parser.parse_args()

if args.output_dir is None:
    args.output_dir = os.path.dirname(os.path.abspath(args.inpath))
os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

args.verbose |= args.Verbose

#-------------------------------------------------

if args.verbose:
    print('loading moments from: '+args.inpath)

data = dict()
with h5py.File(args.inpath, 'r') as obj:
    for field in obj.keys():
        if args.Verbose:
            print('    loading: '+field)
        data[field] = dict((key, obj[field][key][:]) for key in obj[field].keys())

#-------------------------------------------------

# plot

for field in data.keys():
    if args.verbose:
        print('    processing: '+field)

    #---

    scales = data[field]['scales']
    indexes = data[field]['index'].astype(int)
    mom = data[field]['moments']
    cov = data[field]['covariance']

    #--------------------

    if args.Verbose:
        print('    plotting "raw" moments')

    fig = plt.figure()
    ax = fig.gca()

    #---

    for ind, index in enumerate(indexes):
        color = ax.plot(
            scales[:,0],
            mom[:,ind],
            alpha=0.75,
            marker='o',
            markerfacecolor='none',
            linestyle='none',
            label='$p=%d$'%index,
        )[0].get_color()

        for snd, scale in enumerate(scales[:,0]):
            m = mom[snd,ind]
            s = cov[snd,ind,ind]
            if s > 0: # only plot sensible error estimates
                s = s**0.5
                ax.plot([scale]*2, [m-s, m+s], color=color, alpha=0.75)
            elif args.Verbose:
                print('        WARNING! skipping error estimate for index=%d at scale=%d with var=%.3e' % (index, scale, s))

    #---

    ax.set_xlabel('scale')
    ax.set_xscale('log')
    ax.set_xlim(xmin=scales[-1,0]*1.1, xmax=scales[0,0]/1.1)
    ax.set_xticks([], minor=True)
    ax.set_xticks(scales[:,0])
    ax.set_xticklabels(['%d'%_ for _ in ax.get_xticks()])

    ax.set_yscale('log')
    ax.set_ylabel('$\left<\left|d_{x,s}\\right|^p\\right>_x$')

    ax.set_title(field)

    #---

    ax.legend(loc='upper right')
    ax.grid(True, which='both')

    ax.tick_params(**TICK_PARAMS)
    plt.subplots_adjust(**SUBPLOTS_ADJUST)

    #---

    figtmp = os.path.join(
            args.output_dir,
            '%s_%s_moments%s' % (os.path.basename(args.inpath)[:-4], field, args.tag),
    ) + '.%s'
    for figtype in args.figtype:
        figname = figtmp % figtype
        if args.verbose:
            print('    saving: '+figname)
        fig.savefig(figname)
    plt.close(fig)

    #--------------------

    if 2 in indexes: # you can plot scaled moments
        ind2 = list(indexes).index(2)
        std = mom[:,ind2]**0.5

        if args.Verbose:
            print('    plotting "scaled" moments')

        fig = plt.figure()
        ax = fig.gca()

        #---

        for ind, index in enumerate(indexes):
            color = ax.plot(
                scales[:,0],
                mom[:,ind] / std**index,
                alpha=0.75,
                marker='o',
                markerfacecolor='none',
                linestyle='none',
                label='$p=%d$'%index,
            )[0].get_color()

            for snd, scale in enumerate(scales[:,0]):
                m = mom[snd,ind] / std[snd]**index
                s = (-(index/2)*mom[snd,ind]/std[snd]**(index+2))**2 * cov[snd,ind2,ind2] \
                    + (1./std[snd]**index)**2 * cov[snd,ind,ind] \
                    + (1./std[snd]**index)*(-(index/2)*mom[snd,ind]/std[snd]**(index+2)) * cov[snd,ind2,ind]
                if s > 0: # only plot sensible error estimates
                    s = s**0.5
                    ax.plot([scale]*2, [m-s, m+s], color=color, alpha=0.75)
                elif args.Verbose:
                    print('        WARNING! skipping error estimate for index=%d at scale=%d with var=%.3e' % (index, scale, s))

        #---

        ax.set_xlabel('scale')
        ax.set_xscale('log')
        ax.set_xlim(xmin=scales[-1,0]*1.1, xmax=scales[0,0]/1.1)
        ax.set_xticks([], minor=True)
        ax.set_xticks(scales[:,0])
        ax.set_xticklabels(['%d'%_ for _ in ax.get_xticks()])

        ax.set_yscale('log')
        ax.set_ylabel('$\left<\left|d_{x,s}\\right|^p\\right>_x \left/ \left<d_{x,s}^2\\right>_x^{p/2} \\right.$')

        ax.set_title(field)

        #---

        ax.grid(True, which='both')
        ax.legend(loc='upper left')

        ax.tick_params(**TICK_PARAMS)
        plt.subplots_adjust(**SUBPLOTS_ADJUST)

        #---

        figtmp = os.path.join(
                args.output_dir,
                '%s_%s_scaled-moments%s' % (os.path.basename(args.inpath)[:-4], field, args.tag),
        ) + '.%s'
        for figtype in args.figtype:
            figname = figtmp % figtype
            if args.verbose:
                print('    saving: '+figname)
            fig.savefig(figname)
        plt.close(fig)

        #----------------

        if args.Verbose:
            print('    plotting higher moments as a function of second moment')

        fig = plt.figure()
        ax = fig.gca()

        #---

        for ind, index in enumerate(indexes):
            color = ax.plot(
                mom[:,ind2],
                mom[:,ind],
                alpha=0.75,
                marker='o',
                markerfacecolor='none',
                linestyle='none',
                label='$p=%d$'%index,
            )[0].get_color()

            for snd, scale in enumerate(scales[:,0]):
                # plot errors for x-axis
                m = mom[snd,ind2]
                s = cov[snd,ind2,ind2]
                if s > 0: # only plot sensible error estimates
                    s = s**0.5
                    ax.plot([m-s, m+s], [mom[snd,ind]]*2, color=color, alpha=0.75)
                elif args.Verbose:
                    print('        WARNING! skipping error estimate for index=2 at scale=%d with var=%.3e' % (scale, s))

                # plot errors for y-axis
                m = mom[snd,ind]
                s = cov[snd,ind,ind]
                if s > 0: # only plot sensible error estimates
                    s = s**0.5
                    ax.plot([mom[snd,ind2]]*2, [m-s, m+s], color=color, alpha=0.75)
                elif args.Verbose:
                    print('        WARNING! skipping error estimate for index=2 at scale=%d with var=%.3e' % (scale, s))

        #---

        ax.set_xscale('log')
        ax.set_xlabel('$\left<d_{x,s}^2\\right>_x$')

        ax.set_yscale('log')
        ax.set_ylabel('$\left<\left|d_{x,s}\\right|^p\\right>_x$')

        ax.set_title(field)

        #---

        ax.grid(True, which='both')
        ax.legend(loc='best')

        ax.tick_params(**TICK_PARAMS)
        plt.subplots_adjust(**SUBPLOTS_ADJUST)

        #---

        figtmp = os.path.join(
                args.output_dir,
                '%s_%s_extended-intermittency%s' % (os.path.basename(args.inpath)[:-4], field, args.tag),
        ) + '.%s'
        for figtype in args.figtype:
            figname = figtmp % figtype
            if args.verbose:
                print('    saving: '+figname)
            fig.savefig(figname)
        plt.close(fig)

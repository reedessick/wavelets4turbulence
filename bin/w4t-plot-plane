#!/usr/bin/env python3

"""a simple plotting script to examine wavelet decompositions on a plane (2D data)
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np
import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
from w4t import (haar, utils)
from w4t.plot import plane as plt

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('inpath', type=str)
parser.add_argument('-f', '--field', default=[], type=str, action='append', required=True)

parser.add_argument('-m', '--max-edgelength', default=None, type=int)

#---

parser.add_argument('-p', '--plane', nargs=2, default=[], type=int, action='append', required=True,
    help='plot the plane defined by a constant value of this axis (in grid points). Can be repeated. \
e.g.: to plot the plane at x=128, specify "--plane 0 128". To plot the plane at y=64, pass "--plane 1 64"')

#---

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=200, type=float)

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

#---

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

args.verbose |= args.Verbose

#-------------------------------------------------

basename = os.path.basename(args.inpath).split('.')[0] # used to construct output figure names

#-------------------------------------------------

# iterate over fields

for field in args.field:

    data = utils.load(
        [field],
        path=args.inpath,
        max_edgelength=args.max_edgelength,
        verbose=args.verbose,
    )[field]

    if (len(data) > 1): # this is a vector, so compute a few different versions of it
        data = [
            (field+'_x', data[0]),
            (field+'_y', data[1]),
            (field+'_z', data[2]),
            (field+'_mag', np.sum(data**2, axis=0)**0.5)
        ]
    else:
        data = [(field, data[0])]

    # iterate over components of this field
    for label, datum in data:

            if args.Verbose:
                print('examining '+label)

            # basic instantiation
            for dim, ind in args.plane:
                if args.Verbose:
                    print('    plotting dim=%d ind=%d' % (dim, ind))

                ha = haar.HaarArray(np.take(datum, ind, axis=dim)) # grabe the requested plane

                while ha.active[0] > 1: # continue to decompose       
                    scales = '-'.join('%03d'%_ for _ in ha.scales)

                    n0, n1 = ha.active
                    aa = ha.array[:n0, :n1]
                    ad = ha.array[:n0, n1:2*n1]
                    da = ha.array[n0:2*n0, :n1]
                    dd = ha.array[n0:2*n0, n1:2*n1]

                    #---

                    # plot images

                    fig = plt.imshow(aa, ad, da, dd)
                    fig.suptitle(label + '\nscales : '+scales, fontsize=10)

                    figtmp = os.path.join(
                        args.output_dir,
                        '%s_%s_%s_%d-%06d_plot2D-imshow%s' % \
                            (basename, label, scales, dim, ind, args.tag),
                    ) + '.%s'

                    plt.save(fig, figtmp, args.figtype, dpi=args.dpi, verbose=args.verbose, indent=' '*8)
                    plt.close(fig)

                    #---

                    # plot histograms

                    fig = plt.hist(aa, ad, da, dd, histtype='step', log=True, density=True)
                    fig.suptitle(label + '\nscales : '+scales, fontsize=10)

                    figtmp = os.path.join(
                        args.output_dir,
                        '%s_%s_%s_%d-%06d_plot2D-hist%s' % \
                            (basename, label, scales, dim, ind, args.tag),
                    ) + '.%s'

                    plt.save(fig, figtmp, args.figtype, dpi=args.dpi, verbose=args.verbose, indent=' '*8)
                    plt.close(fig)

                    #---

                    del aa, ad, da, dd

                    ha.haar() # decompose

                del ha

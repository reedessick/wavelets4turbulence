#!/usr/bin/env python3

"""a simple plotting script to visualize structure functions
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from w4t.plot import moments as plt
from w4t.utils import io

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('--title', default=None, type=str)

parser.add_argument('-s', '--source', nargs=2, type=str, default=[], action='append', required=True,
    help='label and path for input data. eg: --inpath label path/to/data')

parser.add_argument('-e', '--scaling-poly', nargs=2, type=str, default=[], action='append',
    help='a path to scaling exponent data. eg: --inpath label path/to/data')

parser.add_argument('-l', '--linestyle', nargs=2, type=str, default=[], action='append',
    help='label and linestyle. eg: --linestyle label solid')
parser.add_argument('-m', '--marker', nargs=2, type=str, default=[], action='append',
    help='label and marker. eg: --marker label o')
parser.add_argument('-a', '--alpha', nargs=2, type=str, default=[], action='append',
    help='use this alpha when plotting. eg: --alpha label 0.5')

parser.add_argument('-i', '--index', default=None, type=int,
    help='only plot this index')

parser.add_argument('-r', '--rescale', default=False, action='store_true',
    help='plot mom**(1./index) instead of just mom')

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('--legend', default=False, action='store_true')
parser.add_argument('--grid', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)
parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=None, type=float)

args = parser.parse_args()

args.verbose |= args.Verbose

os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

linestyles = dict(args.linestyle)
markers = dict(args.marker)
alpha = dict((a, float(b)) for a, b in args.alpha)

polys = dict(args.scaling_poly)

#-------------------------------------------------

# load data
data = dict()

for key, path in args.source:
    if args.verbose:
        print('processing: '+key)

    scales, index, mom, cov = io.load_structure_function(path, verbose=args.verbose)

    if key in polys:
        poly, inds, deg, bounds = io.load_scaling_exponent(polys[key], verbose=args.verbose)
        assert np.all(inds==index), 'mismatch in indexes'
    else:
        poly = None

    if args.index is not None: # make sure we have this index
        sel = args.index == index
        assert np.sum(sel) == 1, 'could not find index=%d' % args.index
        index = index[sel]
        mom = mom[:,sel]
        cov = cov[:,sel,:][:,:,sel]

        if poly is not None:
            poly = poly[sel]

    if poly is not None:
        n, m = poly.shape
        poly = (poly.reshape((n,1,m)), [[bounds]]*n)

    data[key] = dict(scales=scales, index=index, mom=mom, cov=cov, poly=poly)

ncols = len(data.keys())

#------------------------

# make plots

#-----------

# basic moments
if args.verbose:
    print('plotting basic moments')

fig = None
for key, val in data.items():
    if args.verbose:
        print('    '+key)

    fig = plt.moments(
        val['scales'],
        val['index'],
        val['mom'],
        val['cov'],
        label=key,
        rescale=args.rescale,
        poly=val['poly'],
        num_std=1.0, # used for error bars
        linestyle=linestyles.get(key, 'none'),
        marker=markers.get(key, 'o'),
        verbose=args.Verbose,
        ncols=ncols,
        legend=args.legend,
        grid=args.grid,
        alpha=alpha.get(key, 0.75),
        fig=fig,
    )

if args.title is not None:
    fig.suptitle(args.title)

figtmp = os.path.join(
    args.output_dir,
    os.path.basename(__file__)+'-mom%s.%s' % (args.tag, '%s'),
)
plt.save(fig, figtmp, args.figtype, verbose=args.verbose, dpi=args.dpi)
plt.close(fig)

#-----------

if not args.index: # plot things scaled by other 2nd moment

    # scaled moments

    if args.verbose:
        print('plotting scaled moments')

    fig = None
    for key, val in data.items():
        if args.verbose:
            print('    '+key)

        fig = plt.scaled_moments(
            val['scales'],
            val['index'],
            val['mom'],
            val['cov'],
            label=key,
            rescale=args.rescale,
            num_std=1.0, # used for error bars
            linestyle=linestyles.get(key, 'none'),
            marker=markers.get(key, 'o'),
            verbose=args.Verbose,
            ncols=ncols,
            legend=args.legend,
            grid=args.grid,
            alpha=alpha.get(key, 0.75),
            fig=fig,
        )

    if args.title is not None:
        fig.suptitle(args.title)

    figtmp = os.path.join(
        args.output_dir,
        os.path.basename(__file__)+'-scaled-mom%s.%s' % (args.tag, '%s'),
    )
    plt.save(fig, figtmp, args.figtype, verbose=args.verbose, dpi=args.dpi)
    plt.close(fig)

    #-------

    # extended intermittency

    if args.verbose:
        print('plotting extended intermittency')

    fig = None
    for key, val in data.items():
        if args.verbose:
            print('    '+key)

        fig = plt.extended_intermittency(
            val['scales'],
            val['index'],
            val['mom'],
            val['cov'],
            label=key,
            rescale=args.rescale,
            num_std=1.0, # used for error bars
            linestyle=linestyles.get(key, 'none'),
            marker=markers.get(key, 'o'),
            verbose=args.Verbose,
            ncols=ncols,
            legend=args.legend,
            grid=args.grid,
            alpha=alpha.get(key, 0.75),
            fig=fig,
        )

    if args.title is not None:
        fig.suptitle(args.title)

    figtmp = os.path.join(
        args.output_dir,
        os.path.basename(__file__)+'-ext-int%s.%s' % (args.tag, '%s'),
    )
    plt.save(fig, figtmp, args.figtype, verbose=args.verbose, dpi=args.dpi)
    plt.close(fig)

#!/usr/bin/env python3

"""an executable to visualize individual structures identified in the flow
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

from argparse import ArgumentParser

### non-standard libraries
from w4t.utils import io

#-------------------------------------------------

KNOWN_COMMANDS = [
    'plot',
    'hist',
    'grand_tour',
]

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('flow', type=str)
parser.add_argument('structure', type=str)

parser.add_argument('command', type=str, nargs='+',
    help='the type of plot you want to make. Can list multiple commands, but all commands \
must be one of: %s' % (', '.join(KNOWN_COMMANDS)))

parser.add_argument('field', type=str)
parser.add_argument('--component', type=int, default=None)

parser.add_argument('-M', '--max-edgelength', default=None, type=int)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)
parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=None, type=float)

args = parser.parse_args()

args.verbose |= args.Verbose

os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

#-------------------------------------------------

# load data

data, field = io.simplify(
    io.load([args.field], path=args.source, verbose=args.verbose)[args.field],
    args.field,
    component=args.component,
    max_edgelength=args.max_edgelength,
    verbose=args.verbose,
)

#-----------

# load structure

structures = io.load_structures(args.structures, verbose=args.verbose)

#------------------------

raise NotImplementedError('''
load structure
load data -> downselect just what belongs within structure

figure out if we want to slice it (i.e., reduce dimension)

delegate to either
    plot
    hist
    grand_tour

save figures
    figtmp = os.path.join(
        args.output_dir,
        os.path.basename(__file__)+'%s.%s' % (args.tag, '%s'),
    )
    plt.save(fig, figtmp, args.figtype, verbose=args.verbose, dpi=args.dpi)
    plt.close(fig)
''')

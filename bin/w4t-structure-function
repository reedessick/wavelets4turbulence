#!/usr/bin/env python3

"""a simple executable to compute structure functions from wavelet transform
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from argparse import ArgumentParser

### non-standard libraries
from w4t.utils import io
from w4t.w4t import pywt

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('source', type=str)
parser.add_argument('target', type=str)

parser.add_argument('field', type=str)
parser.add_argument('--component', type=int, default=None)

parser.add_argument('-M', '--max-edgelength', default=None, type=int)

parser.add_argument('-w', '--wavelet', default=pywt.DEFAULT_WAVELET, type=str)
parser.add_argument('-i', '--index', nargs='+', type=float)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

args = parser.parse_args()

args.verbose |= args.Verbose

args.index = sorted(args.index)

#-------------------------------------------------

# load data into a wavelet array

data, field = io.simplify(
    io.load([args.field], path=args.source, verbose=args.verbose)[args.field],
    args.field,
    component=args.component,
    max_edgelength=args.max_edgelength,
    verbose=args.verbose,
)

#------------------------

# instantiate wavelet object

if args.verbose:
    print('decomposing with wavelet=%s' % args.wavelet)

wa = pywt.PyWaveletArray(
    data,
    args.wavelet,
)

#-----------

# compute structure functions

if args.verbose:
    print('computing structure functions')

scales, mom, cov = wa.isotropic_structure_function(index=args.index, use_abs=True, verbose=args.verbose, Verbose=args.Verbose)

#------------------------

# write structure functions to disk

io.write_structure_function(
    scales,
    args.index,
    mom,
    cov,
    args.target,
    verbose=args.verbose,
    source=args.source,
    field=field,
    max_edgelength=args.max_edgelength,
    wavelet=args.wavelet,
)

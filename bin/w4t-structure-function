#!/usr/bin/env python3

"""a simple executable to compute structure functions from wavelet transform
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from w4t.utils import io
from w4t.utils import moments
from w4t.utils.utils import default_map2scalar

from w4t.w4t import pywt

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('source', type=str)
parser.add_argument('target', type=str)

parser.add_argument('field', type=str)
parser.add_argument('--component', type=int, default=None)
parser.add_argument('--magnitude', default=False, action='store_true')

parser.add_argument('-M', '--max-edgelength', default=None, type=int)
parser.add_argument('--map2scalar', default=None, type=str,
    help='a string that will be evaluated into a function handle to map array data into a scalar')

parser.add_argument('-w', '--wavelet', default=pywt.DEFAULT_WAVELET, type=str)
parser.add_argument('-i', '--index', nargs='+', type=float)

parser.add_argument('-t', '--threshold', default=None, type=float,
    help='if supplied, denoise using this threshold before computing structure function')
parser.add_argument('-m', '--max-scale', default=None, type=float)
parser.add_argument('-s', '--smooth', default=False, action='store_true')

parser.add_argument('--direction', default=None, type=int,
    help='specify the direction (index) used to compute structure function. If not specified, compute isotropic structure \
function by averaging over directions')

parser.add_argument('-d', '--direct', default=False, action='store_true',
    help='if supplied, compute the structure functions "directly" rather than relying on wavelet decomposition')
parser.add_argument('--direct-scales', nargs='+', type=int, default=None,
    help='compute the structure function at these scales directly. If not supplied, will choose diadic scales based on \
size of data') 
parser.add_argument('--direct-increment', default=1, type=int,
    help='only take 1 out of this many possible pairs of points within direct structure function calculation')

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

args = parser.parse_args()

args.verbose |= args.Verbose

args.index = sorted(args.index)

#------------------------

if args.map2scalar is None:
    map2scalar = default_map2scalar
else:
    map2scalar = eval(args.map2scalar)

#-------------------------------------------------

# load data into a wavelet array

data, field = io.simplify(
    io.load([args.field], path=args.source, verbose=args.verbose)[args.field],
    args.field,
    component=args.component,
    magnitude=args.magnitude,
    max_edgelength=args.max_edgelength,
    verbose=args.verbose,
)

#------------------------

if args.threshold is not None: # denoise before computing structure function
    if args.verbose:
        print('denoising with\n    wavelet=%s\n    threshold=%.6f\n    max_scale=%.3f\n    smooth=%s' % \
            (args.wavelet, args.threshold, args.max_scale, args.smooth))

    wa = pywt.PyWaveletArray(data, args.wavelet)
    wa.denoise(args.threshold, map2scalar=map2scalar, max_scale=args.max_scale, smooth=args.smooth)
    wa.idecompose() # make sure we're at full resolution before we save
    data = wa.array

#------------------------

if args.direct:

    if args.verbose:
        print('computing structure function directly (without wavelet decomposition)')

    if args.direct_scales is not None:
        scales = np.array(sorted(args.direct_scales), dtype=int)
    else:
        max_scale = np.min(data.shape[1:])
        scale = 1
        scales = []
        while scale < max_scale:
            scales.append(scale)
            scale *= 2
        scales = np.array(scales, dtype=int)

    mom = []
    cov = []
    for scale in scales:
        if args.direction is None:
            _, m, c = moments.direct_isotropic_structure_function(
                data,
                scale,
                args.index,
                map2scalar=map2scalar,
                increment=args.direct_increment,
                verbose=args.verbose,
                Verbose=args.Verbose,
            )

        else:
            _, m, c = moments.direct_structure_function(
                data,
                args.direction,
                scale,
                args.index,
                map2scalar=map2scalar,
                increment=args.direct_increment,
                verbose=args.verbose,
            )

        mom.append(m)
        cov.append(c)

    mom = np.array(mom, dtype=float)
    cov = np.array(cov, dtype=float)

else:

    # instantiate wavelet object

    if args.verbose:
        print('decomposing with wavelet=%s' % args.wavelet)

    wa = pywt.PyWaveletArray(data, args.wavelet)

    # compute structure functions

    if args.direction is None:
        scales, mom, cov = wa.isotropic_structure_function(
            map2scalar=map2scalar,
            index=args.index,
            use_abs=True,
            verbose=args.verbose,
            Verbose=args.Verbose,
        )

    else:
        scales, mom, cov = wa.structure_function(
            args.direction,
            map2scalar=map2scalar,
            index=args.index,
            use_abs=True,
            verbose=args.verbose,
        )

#------------------------

# write structure functions to disk

kwargs = dict(
    verbose=args.verbose,
    source=args.source,
    field=field,
    max_edgelength=args.max_edgelength,
    direct=args.direct,
    wavelet=args.wavelet,
)

if args.map2scalar is not None:
    kwargs['map2scalar'] = args.map2scalar

io.write_structure_function(scales, args.index, mom, cov, args.target, **kwargs)

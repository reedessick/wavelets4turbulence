#!/usr/bin/env python3

"""a simple executable to identify structures
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from argparse import ArgumentParser

### non-standard libraries
from w4t.utils import io
from w4t.w4t import pywt
from w4t.w4t.w4t import DEFAULT_STRUCTURE_THRESHOLD

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('source', type=str)
parser.add_argument('target', type=str)

parser.add_argument('field', type=str)
parser.add_argument('--component', type=int, default=None)

parser.add_argument('-M', '--max-edgelength', default=None, type=int)

parser.add_argument('-w', '--wavelet', default=pywt.DEFAULT_WAVELET, type=str)
parser.add_argument('-t', '--threshold', default=DEFAULT_STRUCTURE_THRESHOLD, type=float)

parser.add_argument('-n', '--num-proc', default=1, type=int)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

args = parser.parse_args()

args.verbose |= args.Verbose

#-------------------------------------------------

# load data inot a wavelet array

data, field = io.simplify(
    io.load([args.field], path=args.source, verbose=args.verbose)[args.field],
    args.field,
    component=args.component,
    max_edgelength=args.max_edgelength,
    verbose=args.verbose,
)

#------------------------

# instantiate wavelet object

if args.verbose:
    print('decomposing with wavelet=%s' % args.wavelet)

wa = pywt.PyWaveletArray(
    data,
    args.wavelet,
)

#-----------

# identify structures

if args.verbose:
    print('identifying structures with\n    threshold=%.6f\n    num_proc=%d' % (args.threshold, args.num_proc))

structures = wa.structures(thr=args.threshold, num_proc=args.num_proc, timeit=args.verbose)

if args.verbose:
    print('identified %d structures' % len(structures))

    if args.Verbose:
        for ind, struc in enumerate(structures):
            print('    %d : %d pixels' % (ind, len(struc)))

#------------------------

# save data

io.write_structures(
    structures,
    args.target,
    verbose=args.verbose,
    source=args.source,
    field=field,
    shape=wa.shape,
    max_edgelength=args.max_edgelength,
    wavelet=args.wavelet,
    threshold=args.threshold,
)

#!/usr/bin/env python3

"""a simple script to plot current=curl(mag) data from a npy file
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np
import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
from w4t import pywt
from w4t.plot import plane as plt

from w4t.utils import dv # PLASMAtools.aux_funcs.derived_var_funcs

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('inpath', type=str)

#---

parser.add_argument('-w', '--wavelet', type=str, required=True)

#---

parser.add_argument('--denoise', default=None, type=float)
parser.add_argument('--smooth', default=False, action='store_true',
    help='if supplied, retain the small detail coefficients rather than the big ones in the denoising algorithm')

parser.add_argument('--max-scale', default=None, type=int)

#---

parser.add_argument('--log', default=False, action='store_true')
parser.add_argument('--zoom', default=None, nargs=4, type=float,
    help='--zoom xmin xmax ymin ymax')

#---

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=200, type=float)

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

#---

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

args.verbose |= args.Verbose

#-------------------------------------------------

basename = os.path.basename(args.inpath).split('.')[0] # used to construct output figure names

#-------------------------------------------------

# load magnetic field data

if args.verbose:
    print('loading magnetic field from: '+args.inpath)
mag = np.load(args.inpath)
_, nx, ny = mag.shape

#------------------------

# take the curl to get the current

if args.verbose:
    print('computing curr = curl(mag)')

datum = dv.DerivedVars(num_of_dims=2, bcs="00").vector_curl(mag)
label = 'curr_z'

#-------------------------------------------------

# go thru the rest of the logic to decompose and plot

if args.verbose:
    print('computing wavelet decomposition with wavelet=%s' % args.wavelet)

ha = pywt.WaveletArray(datum, args.wavelet)

if args.denoise is not None:
    if args.Verbose:
        print('    denoising with thr=%.3f' % args.denoise)
    ha.denoise(args.denoise, smooth=args.smooth, max_scale=args.max_scale)

#-------------------------------------------------

while ha.scales[0] < 16: # FIXME don't use a magic number
    ha.dwt(axis=0) # approx over the y-axis

#-------------------------------------------------

while ha.active[1] > 1: # continue to decompose over x-axis
    scales = '-'.join('%03d'%_ for _ in ha.scales)
    title = label + '\nscale : ' + scales

    n0, n1 = ha.active
    aa = ha.array[:n0, :n1]
    ad = ha.array[:n0, n1:2*n1]
    da = ha.array[n0:2*n0, :n1]
    dd = ha.array[n0:2*n0, n1:2*n1]

    #---

    # plot images

    fig = plt.imshow(aa, ad, da, dd, log=args.log)
    fig.suptitle(title, fontsize=10)

    figtmp = os.path.join(
        args.output_dir,
        '%s_%s_%s_plane-imshow-fancy%s' % \
            (basename, label, scales, args.tag),
    ) + '.%s'

    plt.save(fig, figtmp, args.figtype, dpi=args.dpi, verbose=args.verbose)
    plt.close(fig)

    ### plot zoomed version
    if args.zoom is not None:

        fig = plt.imshow(aa, ad, da, dd, log=args.log, xmin=args.zoom[0], xmax=args.zoom[1], ymin=args.zoom[2], ymax=args.zoom[3])
        fig.suptitle(title, fontsize=10)

        figtmp = os.path.join(
            args.output_dir,
            '%s_%s_%s_plane-imshow-fancy-zoom%s' % \
                (basename, label, scales, args.tag),
        ) + '.%s'

        plt.save(fig, figtmp, args.figtype, dpi=args.dpi, verbose=args.verbose)
        plt.close(fig)

    #---

    # plot histograms

    fig = plt.hist(aa, ad, da, dd, histtype='step', log=True, density=True)
    fig.suptitle(title, fontsize=10)

    figtmp = os.path.join(
        args.output_dir,
        '%s_%s_%s_plane-hist-fancy%s' % \
            (basename, label, scales, args.tag),
    ) + '.%s'

    plt.save(fig, figtmp, args.figtype, dpi=args.dpi, verbose=args.verbose)
    plt.close(fig)

    #---

    del aa, ad, da, dd

    ha.dwt(axis=1)

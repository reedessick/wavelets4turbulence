#!/usr/bin/env python3

"""a magical script to identify X and O points
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np
import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
from w4t import pywt
from w4t.plot import plane as plt

from w4t.utils import dv # PLASMAtools.aux_funcs.derived_var_funcs

#-------------------------------------------------

def imshow(curr, mag, curr_denoise):
    fig = plt.plt.figure(figsize=plt.FIGSIZE)

    sel = np.abs(curr_denoise) > 2 ### FIXME this is stupid and fragile. Do something smarter to identify regions within the structure

    for ind, (label, cmap, data, ect) in enumerate([
            ('$\log|j|$', 'Greys', curr, np.ones_like(curr, dtype=bool)),
            ('$\log|B|$', 'YlGn_r', mag, np.ones_like(mag, dtype=bool)),
            (None, 'Greys', curr_denoise, np.ones_like(curr_denoise, dtype=bool)),
            (None, 'YlGn_r', mag, sel),
        ]):

        if np.prod(data.shape) == 0: continue

        ax = plt.plt.subplot(2,2,ind+1)

        vmax = np.max(np.log10(np.abs(data)))
        vmin = max(np.min(np.log10(np.abs(data))), vmax-3)

        ax.imshow(
            np.where(ect, np.log10(np.abs(data)), np.nan),
            cmap=cmap,
            vmax=vmax,
            vmin=vmin,
            origin='lower',
            extent=(0, 1, 0, 1),
        )

        if label is not None:
            ax.set_title(label)

#        ax.set_xlim(xmin=0.25, xmax=0.45)
#        ax.set_ylim(ymin=0.45, ymax=0.55)

        ax.tick_params(**plt.IMSHOW_TICK_PARAMS)

        plt.plt.setp(ax.get_xticklabels(), visible=False)
        plt.plt.setp(ax.get_yticklabels(), visible=False)

    # add local minima
    # FIXME! this is not working yet
    '''
    nx, ny = data.shape
    x = np.arange(nx) / nx
    y = np.arange(ny) / ny
    X, Y = np.meshgrid(x, y, indexing='ij')
    X = np.ravel(X)
    Y = np.ravel(Y)

    data = np.ravel(np.where(sel, np.abs(mag), np.inf))

    args = np.argsort(data)[::-1][:10] # smallest first
    ax.plot(X[args], Y[args], marker='o', markersize=1, markeredgecolor='r', markerfacecolor='none', linestyle='none')
    '''

    # finish decorating
    plt.plt.subplots_adjust(**plt.SUBPLOTS_ADJUST)

    return fig

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('inpath', type=str)

#---

parser.add_argument('-w', '--wavelet', type=str, required=True)

parser.add_argument('--denoise', default=5.0, type=float)
parser.add_argument('--max-scale', default=None, type=int)

#---

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=200, type=float)

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

#---

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

args.verbose |= args.Verbose

#-------------------------------------------------

basename = os.path.basename(args.inpath).split('.')[0] # used to construct output figure names

#-------------------------------------------------

# load magnetic field data

if args.verbose:
    print('loading magnetic field from: '+args.inpath)
mag = np.load(args.inpath)
_, nx, ny = mag.shape

#------------------------

# take the curl to get the current

if args.verbose:
    print('computing curr = curl(mag)')

curr = dv.DerivedVars(num_of_dims=2, bcs="00").vector_curl(np.array([mag[0], mag[1], np.zeros((nx, ny))], dtype=float))
curr_ha = pywt.WaveletArray(curr, args.wavelet)

if args.Verbose:
    print('    denoising with thr=%.3f' % args.denoise)
curr_ha.denoise(args.denoise, max_scale=args.max_scale)

#------------------------

if args.verbose:
    print('restricting mag field to identified coherent structure')

mag = np.sum(mag**2, axis=0)**0.5 # take the magnitude of the magnetic field vector

#-------------------------------------------------

# let's make some plots

fig = imshow(curr, mag, curr_ha.array)

figtmp = os.path.join(
    args.output_dir,
    '%s_magic-imshow%s' % \
        (basename, args.tag),
) + '.%s'

plt.save(fig, figtmp, args.figtype, dpi=args.dpi, verbose=args.verbose)
plt.close(fig)

#!/usr/bin/env python3

"""a magical script to identify X and O points
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np
import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
from w4t import pywt
from w4t.plot import plane as plt

from w4t.utils import dv # PLASMAtools.aux_funcs.derived_var_funcs

#-------------------------------------------------

def imshow(curr, curr_denoise, mag, div, det, aspect='auto'):
    fig = plt.plt.figure(figsize=(10,5))

    sel = np.abs(curr_denoise) > 0

    #---

    logcurr = np.log10(np.abs(curr))
#    logcurr_vmax = None
#    logcurr_vmin = None
    logcurr_vmax = np.max(logcurr)
    logcurr_vmin = max(np.min(logcurr), logcurr_vmax-3)

    logcurr_denoise = np.log10(np.abs(curr_denoise))

    logmag = np.log10(np.abs(mag))
#    logmag_vmax = None
#    logmag_vmin = None
    logmag_vmax = np.max(logmag)
    logmag_vmin = max(np.min(logmag), logmag_vmax-3)

    logdiv = np.log10(np.abs(div))
    logdiv_vmax = None
    logdiv_vmin = None
#    logdet_vmax = np.max(np.abs(logdet))
#    logdet_vmin = max(np.min(logdet), logdet_vmax-3)

    logdet = np.log10(np.abs(det))
    logdet_vmax = None
    logdet_vmin = None
#    logdet_vmax = np.max(np.abs(logdet))
#    logdet_vmin = max(np.min(logdet), logdet_vmax-3)

    #---

    for ind, (label, cmap, data, ect, vmin, vmax) in enumerate([
            ('$\log|j|$', 'Greys', logcurr, np.ones_like(curr, dtype=bool), logcurr_vmin, logcurr_vmax),
            ('$\log|B|$', 'YlGn_r', logmag, np.ones_like(mag, dtype=bool), logmag_vmin, logmag_vmax),
            ('$\log|\sum_i \partial_i B_i|$', 'YlGn_r', logdiv, np.ones_like(logdiv, dtype=bool), logdiv_vmin, logdiv_vmax),
            ('$\log|\mathrm{det}|\partial_i B_j||$', 'YlGn_r', logdet, np.ones_like(logdet, dtype=bool), logdet_vmin, logdet_vmax),
            (None, 'Greys', logcurr_denoise, np.ones_like(curr_denoise, dtype=bool), logcurr_vmin, logcurr_vmax),
            (None, 'YlGn_r', logmag, sel, logmag_vmin, logmag_vmax),
            (None, 'YlGn_r', logdiv, sel, logdiv_vmin, logdiv_vmax),
            (None, 'YlGn_r', logdet, sel, logdet_vmin, logdet_vmax),
        ]):

        if np.prod(data.shape) == 0: continue

        ax = plt.plt.subplot(2,4,ind+1)

        ax.imshow(
            np.where(ect, data, np.nan),
            cmap=cmap,
            vmax=vmax,
            vmin=vmin,
            aspect=aspect,
            origin='lower',
            extent=(0, 1, 0, 1),
        )

        if label is not None:
            ax.set_title(label)

#        ax.set_xlim(xmin=0.25, xmax=0.45)
#        ax.set_ylim(ymin=0.45, ymax=0.55)

        ax.tick_params(**plt.IMSHOW_TICK_PARAMS)

        plt.plt.setp(ax.get_xticklabels(), visible=False)
        plt.plt.setp(ax.get_yticklabels(), visible=False)

    #---

    # decorate mag

    nx, ny = mag.shape
    x = (0.5+np.arange(nx)) / nx
    y = (0.5+np.arange(ny)) / ny
    X, Y = np.meshgrid(x, y)

    # find local minima
    data = logmag

    mins = np.ones((nx, ny), dtype=bool)
    mins[0,:] = mins[-1,:] = mins[:,0] = mins[:,-1] = False # exclude edge points

    for i in range(nx-2): # look for local minima in the x-direction
        mins[i+1,:] *= (data[i,:] > data[i+1,:])*(data[i+1,:] < data[i+2,:])

    for j in range(ny-2): # look for local minima in the y-direction
        mins[:,j+1] *= (data[:,j] > data[:,j+1])*(data[:,j+1] < data[:,j+2])

    # plot all minima
    ax.plot(X[mins], Y[mins], marker='.', markersize=1, color='r', alpha=0.25, linestyle='none')

    # plot just the minima within coherent structure
    ax.plot(X[mins*sel], Y[mins*sel], marker='.', markersize=1, color='b', alpha=0.25, linestyle='none')

    # plot minima below some threshold on abs(mag)
    thr = -1.8 # FIXME don't hard-code this
    mins *= data < thr

    ax.plot(X[mins], Y[mins], marker='x', markersize=4, color='k', alpha=1.00, linestyle='none')

    #---

    # finish decorating
    plt.plt.subplots_adjust(**plt.SUBPLOTS_ADJUST)

    #---

    return fig

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('inpath', type=str)

#---

parser.add_argument('-w', '--wavelet', type=str, required=True)

parser.add_argument('--denoise', default=5.0, type=float)
parser.add_argument('--max-scale', default=None, type=int)

#---

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=200, type=float)

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

#---

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

args.verbose |= args.Verbose

#-------------------------------------------------

basename = os.path.basename(args.inpath).split('.')[0] # used to construct output figure names

#-------------------------------------------------

# load magnetic field data

if args.verbose:
    print('loading magnetic field from: '+args.inpath)
mag = np.load(args.inpath)
_, nx, ny = mag.shape

#------------------------

# compute derived quantities

dvf = dv.DerivedVars(num_of_dims=2, bcs="00")

#-----------

# take the curl to get the current

if args.verbose:
    print('computing curr = curl(mag)')

curr = dvf.vector_curl(mag)
curr_ha = pywt.WaveletArray(curr, args.wavelet)

if args.Verbose:
    print('    denoising with thr=%.3f' % args.denoise)
curr_ha.denoise(args.denoise, max_scale=args.max_scale)

#-----------

if args.verbose:
    print('    computing gradient of magnetic field')
grad_mag = dvf.gradient_tensor(mag)

det = grad_mag[0,0]*grad_mag[1,1] - grad_mag[0,1]*grad_mag[1,0] # determinant of dBi/dxj
div = grad_mag[0,0] + grad_mag[1,1] # divergence: \sum_i dBi/dxi

#-----------

if args.verbose:
    print('    computing magnetic field magnitude')
abs_mag = np.sum(mag**2, axis=0)**0.5 # take the magnitude of the magnetic field vector

#-------------------------------------------------

# let's make some plots

fig = imshow(curr, curr_ha.array, abs_mag, div, det, aspect='auto')

figtmp = os.path.join(
    args.output_dir,
    '%s_magic-imshow%s' % \
        (basename, args.tag),
) + '.%s'

plt.save(fig, figtmp, args.figtype, dpi=args.dpi, verbose=args.verbose)
plt.close(fig)

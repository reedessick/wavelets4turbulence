#!/usr/bin/env python3

"""a simple testing script to figure out syntax and which calculations are useful
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np
from scipy.stats import norm # normal distribution; used to diagnose intermittency

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from argparse import ArgumentParser

### non-standard libraries
from w4t import haar
import utils # local!

#-------------------------------------------------

#FIGSIZE = (5,10)
FIGSIZE = None # let this be the default

#---

DEFAULT_SCATTER_QUANTILE = 0.9

#---

APPROX_CMAP = 'RdGy'
DETAIL_CMAP = 'PuOr'

DEFAULT_CMAP = APPROX_CMAP

#------------------------

scat_tick_params = dict(
    left=True,
    right=True,
    top=True,
    bottom=True,
    which='both',
    direction='in',
)

hist_tick_params = dict(
    left=True,
    right=True,
    top=True,
    bottom=True,
    which='both',
    direction='in',
)

#---

subplots_adjust = dict(
    left=0.10,
    right=0.90,
    top=0.90,
    bottom=0.05,
    hspace=0.05,
    wspace=0.05,
)

#-------------------------------------------------

def meshgrid(ind, ndim=2):
    """a helper to automate grid construction
    """
    xs = np.arange(ind) / ind # NOTE this could be fragile
    xs += (xs[1]-xs[0])/2
    return np.meshgrid(*(xs for _ in range(ndim)), indexing='ij')

def sel_by_quantile(data, quantile=None):
    """a helper to select which points are interesting enough to plot in the scatter
    """
    if quantile is not None:
        flat = data.flatten()
        val = flat[np.argsort(flat)[int(len(flat)*quantile)]]
        return (np.abs(flat) > val), val
    else:
        return np.ones_like(data.flatten(), dtype=bool), None

#------------------------

MIN_BINS = 10
MAX_BINS = 500

def _hist(AX1, AX2, data, vals=[], right=False, gaussian=False):
    """a helper function to make cumulative and differential histograms
    """
    # cumulative
    AX1.hist(data.flatten(), bins=min(MAX_BINS, np.prod(data.shape)), histtype='step', density=True, cumulative=-1, alpha=0.5, linewidth=1.0)
    AX1.set_ylim(ymin=0, ymax=1)

    # differential
    nbins = min(MAX_BINS, max(MIN_BINS, int(0.5*np.prod(data.shape)**0.5)))
    AX2.hist(data.flatten(), bins=nbins, histtype='step', density=True, log=True, alpha=0.5, linewidth=1.0)

    # decorate
    xlim1 = AX1.get_xlim()
    xlim2 = AX2.get_xlim()
    xlim = (min(xlim1[0], xlim2[0]), max(xlim1[1], xlim2[1]))

    ylim1 = AX1.get_ylim()
    ylim2 = AX2.get_ylim()
    for val in vals:
        if val is not None:
            AX1.plot([val]*2, ylim1, color='grey', linestyle='dashed') # add marker to denoty selection
            AX2.plot([val]*2, ylim2, color='grey', linestyle='dashed') # add marker to denoty selection
    AX1.set_ylim(ylim1)
    AX2.set_ylim(ylim2)

    if gaussian: # add a Gaussian fit by matching moments
        m = np.mean(data.flatten())
        s = np.std(data.flatten())

        x = np.linspace(*xlim, 101)

        # add to cumulative historgram
        y = norm.sf(x, loc=m, scale=s)
        AX1.fill_between(
            x,
            np.ones_like(x)*ylim1[0],
            y,
            edgecolor='none',
            facecolor='grey',
            alpha=0.25,
        )
        AX1.plot(x, y, color='k', alpha=0.25, linestyle='dashed', linewidth=1.0)

        # add to differential histogram
        y = norm.pdf(x, loc=m, scale=s)
        AX2.fill_between(
            x,
            np.ones_like(x)*ylim2[0],
            y,
            edgecolor='none',
            facecolor='grey',
            alpha=0.25,
        )
        AX2.plot(x, y, color='k', alpha=0.25, linestyle='dashed', linewidth=1.0)

    AX1.text(xlim[1] , ylim1[1], '%d points' % np.prod(data.shape), ha='right', va='top')

    for AX in [AX1, AX2]:
        if right:
            AX.yaxis.tick_right()
        AX.tick_params(**hist_tick_params)
#        AX.grid(True, which='both')
        AX.set_xlim(xlim)

    plt.setp(AX1.get_xticklabels(), visible=False)

#------------------------

def scatter2d(fig, ax, AX1, AX2, xs, ys, data, quantile=DEFAULT_SCATTER_QUANTILE, cmap=DEFAULT_CMAP, right=False, gaussian=False):
    """generate 2D scatter-plots with histograms underneath
    """
    cs = data / np.max(np.abs(data))
    sel, val = sel_by_quantile(data, quantile=quantile)

    fig.colorbar(
        ax.scatter(
            xs.flatten()[sel],
            ys.flatten()[sel],
            c=cs.flatten()[sel],
            alpha=0.25,
            vmin=-1,
            vmax=+1,
            s=1.0, # small dots
            marker='.',
            cmap=cmap,
        ),
        cmap=cmap,
        ax=ax,
        location='right' if right else 'left',
        shrink=1.0,
    )

    ax.set_xlim(xmin=0, xmax=1)
    ax.set_ylim(ymin=0, ymax=1)

    plt.setp(ax.get_xticklabels(), visible=False)
    plt.setp(ax.get_yticklabels(), visible=False)

    ax.tick_params(**scat_tick_params)

    #---

    _hist(AX1, AX2, data, vals=[-val, +val], right=right, gaussian=gaussian)

    #---

    plt.subplots_adjust(**subplots_adjust)

#------------------------

def scatter3d(fig, ax, AX1, AX2, xs, ys, zs, data, quantile=DEFAULT_SCATTER_QUANTILE, cmap=DEFAULT_CMAP, right=False, gaussian=False):
    """generate 3D scatter-plots with histograms underneath
    """
    # FIXME: make both color and alpha track the value?

    cs = data / np.max(np.abs(data))
    sel, val = sel_by_quantile(data, quantile=quantile)

    fig.colorbar(
        ax.scatter(
            xs.flatten()[sel],
            ys.flatten()[sel],
            zs.flatten()[sel],
            c=cs.flatten()[sel],
            alpha=0.25,
            vmin=-1,
            vmax=+1,
            s=1.0, # small dots
            marker='.',
            cmap=cmap,
        ),
        cmap=cmap,
        ax=ax,
        location='right' if right else 'left',
        shrink=0.75,
    )

    ax.set_xlim(xmin=0, xmax=1)
    ax.set_ylim(ymin=0, ymax=1)
    ax.set_zlim(zmin=0, zmax=1)

    plt.setp(ax.get_xticklabels(), visible=False)
    plt.setp(ax.get_yticklabels(), visible=False)
    plt.setp(ax.get_zticklabels(), visible=False)

    ax.tick_params(**scat_tick_params)

    #---

    _hist(AX1, AX2, data, vals=[-val, +val], right=right, gaussian=gaussian)

    #---

    plt.subplots_adjust(**subplots_adjust)

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('--path', type=str, default=None,
    help='path to an HDF file containing simulation data')

parser.add_argument('-n', '--num-grid', type=int, default=utils.DEFAULT_NUM_GRID,
    help='the number of grid points used when constructing random data instead of reading from --path')

parser.add_argument('--seed', default=None, type=int)

#---

parser.add_argument('--denoise', default=False, action='store_true',
    help='de-noise the wavelet decomposition before plotting')

#---

parser.add_argument('-f', '--field', required=True, default=[], type=str, action='append',
    help='load and manipulate this field. Can be repeated. eg, --field vel --field mag --field dens')

parser.add_argument('--components', default=False, action='store_true',
    help='if supplied, analyze the components instead of the magnitude of a vector')

parser.add_argument('--max-edgelength', default=None, type=int,
    help='if specified, limit the size of each dimension to be at most this many samples. Although not required, \
it is a good idea to make this a power of 2 (for the Haar transform to work well)')

parser.add_argument('--scatter-quantile', default=DEFAULT_SCATTER_QUANTILE, type=float,
    help='only plot values above this quantile in the distribution within scatter plots. DEFAULT=%f' % DEFAULT_SCATTER_QUANTILE)

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('--dpi', default=500, type=int)

#---

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

args.verbose |= args.Verbose

#-------------------------------------------------

utils.seed(args.seed, verbose=args.verbose)

#-------------------------------------------------

for field in args.field:

    if args.verbose:
        print('examining field: '+field)

    data = utils.load(
        [field],
        path=args.path,
        num_grid=args.num_grid,
        max_edgelength=args.max_edgelength,
        verbose=args.verbose,
        Verbose=args.Verbose,
    )[field]

    if (len(data) > 1) and (not args.components):
        if args.verbose:
            print('\n<<< WARNING >>> examining the absolute value of multi-dimensional field\n')
        data = [np.sum(data**2, axis=0)**0.5] # quadrature sum of vector components

    for ind in range(len(data)): # iterate over separate components

        if (len(data) > 1) and args.verbose:
            print('examining %s[%d]' % (field, ind))

        # basic instantiation
        ha = haar.HaarArray(data[ind])

        if args.denoise:
            if args.verbose:
                print('denoising data')
            thr = ha.denoise() # denoise
            ha.idecompose() # got back to the starting point
            if args.verbose:
                print('    retaining only detail coeffs larger than thr=%.6f' % thr)

        if args.Verbose:
            print(ha.array)

            print('    ndim', ha.ndim)
            print('    shape', ha.shape)

            print('    active', ha.active)
            print('    levels', ha.levels)
            print('    scales', ha.scales)
            print('    wavenumbers', ha.wavenumbers)

        #--------------------

        # make some plots

        if args.verbose:
            print('plotting 3D distributions')

        ha.idecompose()

        while ha.active[0] > 1: # keep decomposing

            a = ha.approx # grab coefficients
            d = ha.detail

            xs, ys, zs = meshgrid(ha.active[0], ndim=3)
    
            #---

            # make 3D scatter plot

            fig = plt.figure(figsize=FIGSIZE)

            if len(a):    
#                ax = fig.add_subplot(2, 2, 1, projection='3d')
#                AX1 = fig.add_subplot(4, 2, 5)
#                AX2 = fig.add_subplot(4, 2, 7)
                ax = fig.add_subplot(3, 2, 1, projection='3d')
                AX1 = fig.add_subplot(3, 2, 3)
                AX2 = fig.add_subplot(3, 2, 5)

                scatter3d(fig, ax, AX1, AX2, xs, ys, zs, a, quantile=args.scatter_quantile, gaussian=True)

                ax.set_title('approx')

            if len(d):
                ax = fig.add_subplot(2, 2, 2, projection='3d')
                AX1 = fig.add_subplot(4, 2, 6)
                AX2 = fig.add_subplot(4, 2, 8)

                scatter3d(fig, ax, AX1, AX2, xs, ys, zs, d, quantile=args.scatter_quantile, right=True, gaussian=True)

                ax.set_title('detail')

            #---

            scales = '-'.join('%03d'%_ for _ in ha.scales)
            fig.suptitle('scales : '+scales)

            #---

            if len(data) > 1:
                figname = os.path.join(args.output_dir, 'test-3d-scatter-%s-%s-%d%s.png' % (scales, field, ind, args.tag))
            else:
                figname = os.path.join(args.output_dir, 'test-3d-scatter-%s-%s%s.png' % (scales, field, args.tag))

            if args.verbose:
                print('    saving: '+figname)
            fig.savefig(figname, dpi=args.dpi)
            plt.close(fig)

            #---

            ha.haar() # decompose

        #--------------------

        if args.verbose:
            print('plotting 2D distributions along the midplane')

        ha.idecompose()

        # make an object that only knows about the mid-plane
        ha2d = haar.HaarArray(ha.array[:,:,ha.shape[2]//2])

        while ha2d.active[0] > 1:

            a = ha2d.approx # grab coefficients
            d = ha2d.detail

            xs, ys = meshgrid(ha2d.active[0], ndim=2)

            #---

            fig = plt.figure(figsize=FIGSIZE)

            if np.prod(a.shape):
                ax = fig.add_subplot(2, 2, 1)
                AX1 = fig.add_subplot(4, 2, 5)
                AX2 = fig.add_subplot(4, 2, 7)

                scatter2d(fig, ax, AX1, AX2, xs, ys, a, quantile=args.scatter_quantile, cmap=APPROX_CMAP, gaussian=True)

                ax.set_title('approx')

            if np.prod(d.shape):
                ax = fig.add_subplot(2, 2, 2)
                AX1 = fig.add_subplot(4, 2, 6)
                AX2 = fig.add_subplot(4, 2, 8)

                scatter2d(fig, ax, AX1, AX2, xs, ys, d, quantile=args.scatter_quantile, cmap=DETAIL_CMAP, right=True, gaussian=True)

                ax.set_title('detail')

            #---

            scales = '-'.join('%03d'%_ for _ in ha2d.scales)
            fig.suptitle('scales : '+scales)

            #---

            if len(data) > 1:
                figname = os.path.join(args.output_dir, 'test-2d-scatter-%s-%s-%d%s.png' % (scales, field, ind, args.tag))
            else:
                figname = os.path.join(args.output_dir, 'test-2d-scatter-%s-%s%s.png' % (scales, field, args.tag))

            if args.verbose:
                print('    saving: '+figname)
            fig.savefig(figname, dpi=args.dpi)
            plt.close(fig)

            #---

            # decompose
            ha2d.haar()

        del ha
        del ha2d

    del data

#!/usr/bin/env python3

"""a simple testing script to figure out syntax and which calculations are useful
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from w4t import haar
import utils # this is local!

#-------------------------------------------------

def test_transform(ha):
    """perform some basic tests of the tranform object
    """
    # 1D decompositions
    for axis in range(ha.ndim):
        print('--- axis=%d' % axis)

        # try taking decompositions
        ha.haar(axis=axis)

        print(ha.array)
        print('active', ha.active)
        print('levels', ha.levels)
        print('scales', ha.scales)
        print('wavenumbers', ha.wavenumbers)

        # try taking inverse decompositions
        ha.ihaar(axis=axis)

        print(ha.array)
        print('active', ha.active)
        print('levels', ha.levels)
        print('scales', ha.scales)
        print('wavenumbers', ha.wavenumbers)

    #---

    # automatic decompositions
    print('--- all axes')

    print('HAAR 0')
    print(ha.array)
    print('levels', ha.levels)
    print('active', ha.active)

    ha.haar()

    print('HAAR 1')
    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    ha.haar()

    print('HAAR 2')
    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    ha.ihaar()

    print('HAAR 1')
    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    ha.ihaar()

    print('HAAR 0')
    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    #---

    print('--- decompose')

    ha.decompose()

    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    ha.idecompose()

    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('--path', type=str, default=None,
    help='path to an HDF file containing simulation data')

parser.add_argument('-n', '--num-grid', type=int, default=32,
    help='the number of grid points used when constructing random data instead of reading from --path')

parser.add_argument('--seed', default=None, type=int)

#---

parser.add_argument('-f', '--field', required=True, default=[], type=str, action='append',
    help='load and manipulate this field. Can be repeated. eg, --field vel --field mag --field dens')

parser.add_argument('--max-edgelength', default=None, type=int,
    help='if specified, limit the size of each dimension to be at most this many samples. Although not required, \
it is a good idea to make this a power of 2 (for the Haar transform to work well)')

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

#---

args = parser.parse_args()

args.verbose |= args.Verbose

#-------------------------------------------------

utils.seed(args.seed, verbose=args.verbose)

#-------------------------------------------------

for field in args.field:

    if args.verbose:
        print('examining field: '+field)

    data = utils.load(
        [field],
        path=args.path,
        num_grid=args.num_grid,
        max_edgelength=args.max_edgelength,
        verbose=args.verbose,
        Verbose=args.Verbose,
    )[field]

    if (data.shape[0] > 1) and args.Verbose:
        print('WARNING: only examining index 0 of field')

    # basic instantiation
    ha = haar.HaarArray(data[0])
    del data

    if args.Verbose:
        print(ha.array)

    if args.verbose:
        print('    ndim', ha.ndim)
        print('    shape', ha.shape)

        print('    active', ha.active)
        print('    levels', ha.levels)
        print('    scales', ha.scales)
        print('    wavenumbers', ha.wavenumbers)

    #---

    if args.verbose:
        print('testing Haar decomposition of: '+field)
    test_transform(ha)

#!/usr/bin/env python3

"""a simple testing script to figure out syntax and which calculations are useful
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from argparse import ArgumentParser

### non-standard libraries
try:
    from PLASMAtools.read_funcs.read import Fields
except ImportError:
    Fields = None

from w4t import haar

#-------------------------------------------------


tick_params = dict(
    left=True,
    right=True,
    top=True,
    bottom=True,
    which='both',
    direction='in',
)

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('--path', type=str, default=None,
    help='path to an HDF file containing simulation data')

parser.add_argument('-n', '--num-grid', type=int, default=32,
    help='the number of grid points used when constructing random data instead of reading from --path')

parser.add_argument('--seed', default=None, type=int)

parser.add_argument('-f', '--field', required=True, default=[], type=str, action='append',
    help='load and manipulate this field. Can be repeated. eg, --field vel --field mag --field dens')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

args = parser.parse_args()

#-------------------------------------------------

if args.seed is not None:
    if args.verbose:
        print('setting numpy.random.seed=%d' % args.seed)
    np.random.seed(args.seed)

#-------------------------------------------------

data = dict()

if args.path is not None: # read data from file
    if args.verbose:
        print('loading: '+args.path)

    if Fields is None:
        raise ImportError('could not import PLASMAtools.read_funcs.read.Fields')

    turb = Fields(args.path, reformat=True)

    # read the fields
    for field in args.field:
        turb.read(field)
        data[field] = getattr(turb, field) # replacement for this syntax: turb.vel

    del turb # get rid of this object to save memory

else: # generate random data on a big-ish 3D array

    shape = (1,)+(args.num_grid,)*3
    if args.verbose:
        print('generating randomized data with shape: %s' % (shape,))

    # use grid to compute coherent structure
    x = np.arange(args.num_grid) / args.num_grid
    x, y, z = np.meshgrid(x, x, x, indexing='ij')

    coherent = 0.5*np.exp(-0.5*((x-0.5)**2 + (y-0.5)**2)/0.1**2) ### a vertical tube

    # iterate through fields and add Gaussia noise
    size = (1,)+(args.num_grid,)*3
    for field in args.field:
        data[field] = coherent + np.random.normal(size=size)

#---

if args.verbose:
    print('    '+field, data[field].shape) # expect [num_dim, num_x, num_y, num_z]

#-------------------------------------------------

# compute Haar decomposition of all fields

for field in args.field:
    if args.verbose:
        print('testing Haar decomposition of: '+field)

    #---

    if len(data[field] > 1) and args.verbose:
        print('WARNING: only examining index 0 of field')

    # basic instantiation
    ha = haar.HaarArray(data[field][0])

    print(ha.array)
    print('ndim', ha.ndim)
    print('shape', ha.shape)

    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    #---

    # 1D decompositions
    for axis in range(3):
        print('--- axis=%d' % axis)

        # try taking decompositions
        ha.haar(axis=axis)

        print(ha.array)
        print('active', ha.active)
        print('levels', ha.levels)
        print('scales', ha.scales)
        print('wavenumbers', ha.wavenumbers)

        # try taking inverse decompositions
        ha.ihaar(axis=axis)

        print(ha.array)
        print('active', ha.active)
        print('levels', ha.levels)
        print('scales', ha.scales)
        print('wavenumbers', ha.wavenumbers)

    #---

    # automatic decompositions
    print('--- all axes')

    print('HAAR 0')
    print(ha.array)
    print('levels', ha.levels)
    print('active', ha.active)

    ha.haar()

    print('HAAR 1')
    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    ha.haar()

    print('HAAR 2')
    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    ha.ihaar()

    print('HAAR 1')
    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    ha.ihaar()
    print('HAAR 0')
    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    #---

    print('--- decompose')

    ha.decompose()

    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    ha.idecompose()

    print(ha.array)
    print('active', ha.active)
    print('levels', ha.levels)
    print('scales', ha.scales)
    print('wavenumbers', ha.wavenumbers)

    #--------------------

    # NOTE: assumes all grid dimensions have the same number of points, which could be fragile

    if args.verbose:
        print('plotting 3D distributions')

    ha.idecompose()

    while ha.active[0] > 1: # keep decomposing

        a = ha.approx # grab coefficients
        d = ha.detail

        #---

        # make 3D scatter plot

        # FIXME: make both color and alpha track the value?

        fig = plt.figure()

        ind = ha.active[0]
        xs = np.arange(ind) / ind # NOTE this could be fragile
        xs += (xs[1]-xs[0])/2

        xs, ys, zs = np.meshgrid(xs, xs, xs, indexing='ij')
    
        if len(a):    
            ax1 = fig.add_subplot(2, 2, 1, projection='3d')
            cs = a / np.max(np.abs(a))

            sel = np.abs(a.flatten()) > 4.0

            fig.colorbar(
                ax1.scatter(
                    xs.flatten()[sel],
                    ys.flatten()[sel],
                    zs.flatten()[sel],
                    c=cs.flatten()[sel],
                    alpha=0.25,
                    vmin=-1,
                    vmax=+1,
                    marker='.',
                    cmap='RdGy',
                ),
                cmap='RdGy',
                ax=ax1,
                location='left',
                shrink=0.75,
            )

            ax1.set_xlim(xmin=0, xmax=1)
            ax1.set_ylim(ymin=0, ymax=1)
            ax1.set_zlim(zmin=0, zmax=1)

            ax1.set_title('approx')
#            ax1.tick_params(**tick_params)

            AX1 = fig.add_subplot(2, 2, 3)
            AX1.hist(a.flatten(), bins=min(100, max(10, int(0.5*np.prod(a.shape)**0.5))), histtype='step', density=True)

            xlim = 4 # np.max(np.abs(AX1.set_xlim()))
#            AX1.set_xlim(xmin=-xlim, xmax=+xlim)
            AX1.tick_params(**tick_params)

            ylim = AX1.get_ylim()[1]
            AX1.text(-0.95*xlim, 0.95*ylim, 'num = %d' % np.prod(a.shape), ha='left', va='top')
            AX1.set_ylim(ymin=0, ymax=ylim)

        if len(d):
            ax2 = fig.add_subplot(2, 2, 2, projection='3d')
            cs = d / np.max(np.abs(d))

            sel = np.abs(d.flatten()) > 1.0

            fig.colorbar(
                ax2.scatter(
                    xs.flatten(),
                    ys.flatten(),
                    zs.flatten(),
                    c=cs.flatten(),
                    alpha=0.25,
                    vmin=-1,
                    vmax=+1,
                    marker='.',
                    cmap='PuOr',
                ),
                cmap='PuOr',
                ax=ax2,
                location='left',
                shrink=0.75,
            )

            ax2.set_xlim(xmin=0, xmax=1)
            ax2.set_ylim(ymin=0, ymax=1)
            ax2.set_zlim(zmin=0, zmax=1)

            ax2.set_title('detail')
#            ax2.tick_params(**tick_params)

            AX2 = fig.add_subplot(2, 2, 4)
            AX2.hist(d.flatten(), bins=min(100, max(10, int(0.5*np.prod(d.shape)**0.5))), histtype='step', density=True)

            AX2.yaxis.tick_right()

            xlim = 4 # np.max(np.abs(AX2.set_xlim()))
#            AX2.set_xlim(xmin=-xlim, xmax=+xlim)
            AX2.tick_params(**tick_params)

            ylim = AX2.get_ylim()[1]
            AX2.text(-0.95*xlim, 0.95*ylim, 'num = %d' % np.prod(d.shape), ha='left', va='top')
            AX2.set_ylim(ymin=0, ymax=ylim)

        #---

        scales = '-'.join('%03d'%_ for _ in ha.scales)
        fig.suptitle('scales : '+scales)

        #---

        figname = 'test-3d-scatter-%s.png' % scales
        if args.verbose:
            print('    saving: '+figname)
        fig.savefig(figname)
        plt.close(fig)

        #---

        ha.haar() # decompose

    #--------------------

    if args.verbose:
        print('plotting 2D distributions along the midplane')

    ha.idecompose()

    # make an object that only knows about hte mid-plane
    ha2d = haar.HaarArray(ha.array[:,:,ha.shape[2]//2])

    while ha2d.active[0] > 1:

        a = ha2d.approx # grab coefficients
        d = ha2d.detail

        #---

        fig = plt.figure()

        ind = ha2d.active[0]
        xs = np.arange(ind) / ind # NOTE this could be fragile
        xs += (xs[1]-xs[0])/2

        xs, ys = np.meshgrid(xs, xs, indexing='ij')

        if np.prod(a.shape):
            ax1 = fig.add_subplot(2, 2, 1)
            cs = a / np.max(np.abs(a))

#            sel = np.abs(a.flatten()) > 1.0
            sel = np.ones_like(a.flatten(), dtype=bool)

            fig.colorbar(
                ax1.scatter(
                    xs.flatten()[sel],
                    ys.flatten()[sel],
                    c=cs.flatten()[sel],
                    alpha=0.25,
                    vmin=-1,
                    vmax=+1,
                    marker='.',
                    cmap='RdGy',
                ),
                cmap='RdGy',
                ax=ax1,
                location='left',
                shrink=0.75,
            )

            ax1.set_xlim(xmin=0, xmax=1)
            ax1.set_ylim(ymin=0, ymax=1)

            ax1.set_title('approx')
#            ax1.tick_params(**tick_params)

            AX1 = fig.add_subplot(2, 2, 3)
            AX1.hist(a.flatten(), bins=min(100, max(10, int(0.5*np.prod(a.shape)**0.5))), histtype='step', density=True)

            xlim = 4 # np.max(np.abs(AX1.set_xlim()))
#            AX1.set_xlim(xmin=-xlim, xmax=+xlim)
            AX1.tick_params(**tick_params)

            ylim = AX1.get_ylim()[1]
            AX1.text(-0.95*xlim, 0.95*ylim, 'num = %d' % np.prod(a.shape), ha='left', va='top')

            AX1 = fig.add_subplot(2, 2, 3)
            AX1.hist(a.flatten(), bins=min(100, max(10, int(0.5*np.prod(a.shape)**0.5))), histtype='step', density=True)

            xlim = 4 # np.max(np.abs(AX1.set_xlim()))
#            AX1.set_xlim(xmin=-xlim, xmax=+xlim)
            AX1.tick_params(**tick_params)

            ylim = AX1.get_ylim()[1]
            AX1.text(-0.95*xlim, 0.95*ylim, 'num = %d' % np.prod(a.shape), ha='left', va='top')
            AX1.set_ylim(ymin=0, ymax=ylim)

            AX1.grid(True, which='both')

        if np.prod(d.shape):
            ax2 = fig.add_subplot(2, 2, 2)
            cs = d / np.max(np.abs(d))

            sel = np.abs(d.flatten()) > 1.0

            fig.colorbar(
                ax2.scatter(
                    xs.flatten(),
                    ys.flatten(),
                    c=cs.flatten(),
                    alpha=0.25,
                    vmin=-1,
                    vmax=+1,
                    marker='.',
                    cmap='PuOr',
                ),
                cmap='PuOr',
                ax=ax2,
                location='left',
                shrink=0.75,
            )

            ax2.set_xlim(xmin=0, xmax=1)
            ax2.set_ylim(ymin=0, ymax=1)

            ax2.set_title('detail')
#            ax2.tick_params(**tick_params)

            AX2 = fig.add_subplot(2, 2, 4)
            AX2.hist(d.flatten(), bins=min(100, max(10, int(0.5*np.prod(d.shape)**0.5))), histtype='step', density=True)

            AX2.yaxis.tick_right()

            xlim = 4 # np.max(np.abs(AX2.set_xlim()))
#            AX2.set_xlim(xmin=-xlim, xmax=+xlim)
            AX2.tick_params(**tick_params)

            ylim = AX2.get_ylim()[1]
            AX2.text(-0.95*xlim, 0.95*ylim, 'num = %d' % np.prod(d.shape), ha='left', va='top')
            AX2.set_ylim(ymin=0, ymax=ylim)

            AX2.grid(True, which='both')

        #---

        scales = '-'.join('%03d'%_ for _ in ha2d.scales)
        fig.suptitle('scales : '+scales)

        #---

        figname = 'test-2d-scatter-%s.png' % scales
        if args.verbose:
            print('    saving: '+figname)
        fig.savefig(figname)
        plt.close(fig)

        #---

        # decompose
        ha2d.haar()

    #--------------------

    if args.verbose:
        print('plotting 2D distributions after averaging along the z-axis')

    ha.idecompose()

    # make an object that is already averaged over the entire z-direction
    ha.decompose(axis=2)
    ha2d = haar.HaarArray(ha.approx[:,:,0])

    while ha2d.active[0] > 1:

        a = ha2d.approx # grab coefficients
        d = ha2d.detail

        #---

        fig = plt.figure()

        ind = ha2d.active[0]
        xs = np.arange(ind) / ind # NOTE this could be fragile
        xs += (xs[1]-xs[0])/2

        xs, ys = np.meshgrid(xs, xs, indexing='ij')

        if np.prod(a.shape):
            ax1 = fig.add_subplot(2, 2, 1)
            cs = a / np.max(np.abs(a))

#            sel = np.abs(a.flatten()) > 1.0
            sel = np.ones_like(a.flatten(), dtype=bool)

            fig.colorbar(
                ax1.scatter(
                    xs.flatten()[sel],
                    ys.flatten()[sel],
                    c=cs.flatten()[sel],
                    alpha=0.25,
                    vmin=-1,
                    vmax=+1,
                    marker='.',
                    cmap='RdGy',
                ),
                cmap='RdGy',
                ax=ax1,
                location='left',
                shrink=0.75,
            )

            ax1.set_xlim(xmin=0, xmax=1)
            ax1.set_ylim(ymin=0, ymax=1)

            ax1.set_title('approx')
#            ax1.tick_params(**tick_params)

            AX1 = fig.add_subplot(2, 2, 3)
            AX1.hist(a.flatten(), bins=min(100, max(10, int(0.5*np.prod(a.shape)**0.5))), histtype='step', density=True)

            xlim = 4 # np.max(np.abs(AX1.set_xlim()))
#            AX1.set_xlim(xmin=-xlim, xmax=+xlim)
            AX1.tick_params(**tick_params)

            ylim = AX1.get_ylim()[1]
            AX1.text(-0.95*xlim, 0.95*ylim, 'num = %d' % np.prod(a.shape), ha='left', va='top')

            AX1 = fig.add_subplot(2, 2, 3)
            AX1.hist(a.flatten(), bins=min(100, max(10, int(0.5*np.prod(a.shape)**0.5))), histtype='step', density=True)

            xlim = 4 # np.max(np.abs(AX1.set_xlim()))
#            AX1.set_xlim(xmin=-xlim, xmax=+xlim)
            AX1.tick_params(**tick_params)

            ylim = AX1.get_ylim()[1]
            AX1.text(-0.95*xlim, 0.95*ylim, 'num = %d' % np.prod(a.shape), ha='left', va='top')
            AX1.set_ylim(ymin=0, ymax=ylim)

            AX1.grid(True, which='both')

        if np.prod(d.shape):
            ax2 = fig.add_subplot(2, 2, 2)
            cs = d / np.max(np.abs(d))

            sel = np.abs(d.flatten()) > 1.0

            fig.colorbar(
                ax2.scatter(
                    xs.flatten(),
                    ys.flatten(),
                    c=cs.flatten(),
                    alpha=0.25,
                    vmin=-1,
                    vmax=+1,
                    marker='.',
                    cmap='PuOr',
                ),
                cmap='PuOr',
                ax=ax2,
                location='left',
                shrink=0.75,
            )

            ax2.set_xlim(xmin=0, xmax=1)
            ax2.set_ylim(ymin=0, ymax=1)

            ax2.set_title('detail')
#            ax2.tick_params(**tick_params)

            AX2 = fig.add_subplot(2, 2, 4)
            AX2.hist(d.flatten(), bins=min(100, max(10, int(0.5*np.prod(d.shape)**0.5))), histtype='step', density=True)

            AX2.yaxis.tick_right()

            xlim = 4 # np.max(np.abs(AX2.set_xlim()))
#            AX2.set_xlim(xmin=-xlim, xmax=+xlim)
            AX2.tick_params(**tick_params)

            ylim = AX2.get_ylim()[1]
            AX2.text(-0.95*xlim, 0.95*ylim, 'num = %d' % np.prod(d.shape), ha='left', va='top')
            AX2.set_ylim(ymin=0, ymax=ylim)

            AX2.grid(True, which='both')

        #---

        scales = '-'.join('%03d'%_ for _ in ha2d.scales)
        fig.suptitle('scales : '+scales)

        #---

        figname = 'test-2da-scatter-%s.png' % scales
        if args.verbose:
            print('    saving: '+figname)
        fig.savefig(figname)
        plt.close(fig)

        #---

        # decompose
        ha2d.haar()

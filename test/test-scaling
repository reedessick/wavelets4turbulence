#!/usr/bin/env python3

"""a simple testing script to figure out syntax and which calculations are useful
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import tracemalloc # used to check memory usage
import time # used to check runtime

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from argparse import ArgumentParser

### non-standard libraries
from w4t import haar
import utils # local!

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('grid_range', nargs=2, type=int,
    help='the min and max number of grid points used when constructing synthetic data')

parser.add_argument('--seed', default=None, type=int)

#---

parser.add_argument('-N', '--num-trials', default=10, type=int,
    help='the number of trials to run for timing tests')

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

#---

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

utils.seed(args.seed, verbose=args.verbose)

#-------------------------------------------------

# iterate through grid sizes
num = 2
while num < args.grid_range[0]:
    num *= 2

summary = {
    'grid size' : [],
    'HaarArray.decompose' : [],
    'HaarArray.idecompose' : [],
}

while num <= args.grid_range[1]:

    # generate fake data
    data = utils.load(
        ['dummy'],
        num_grid=num,
    )

    ha = haar.HaarArray(data['dummy'][0])

    #---

    # perform tests
    if args.verbose:
        print('num_grid = %d (%d trials)' %(num, args.num_trials))

    # take decompositions to and estimate how long they take to run
    decomp = []
    decomp_mem = []

    idecomp = []
    idecomp_mem = []

    for trial in range(args.num_trials):
        for foo, run, mem in [
                (ha.decompose, decomp, decomp_mem),
                (ha.idecompose, idecomp, idecomp_mem),
            ]:
            tracemalloc.start()
            t0 = time.time()
            foo()
            run.append(time.time()-t0)
            current, peak = tracemalloc.get_traced_memory()
            mem.append(peak)
            tracemalloc.stop()

    del ha

    # report
    summary['grid size'].append(num)

    for label, run, mem in [
            ('HaarArray.decompose', decomp, decomp_mem),
            ('HaarArray.idecompose', idecomp, idecomp_mem),
        ]:
        mr = np.mean(run) * 1e3 # ms
        sr = np.std(run) * 1e3

        mm = np.mean(mem) / 1e3 # kB
        sm = np.std(mem) / 1e3

        summary[label].append((mr, sr, mm, sm))

        if args.verbose:
            print('''\
    %s
        runtime = %.6f +/- %.6f ms
        memory  = %.1f +/- %.1f KB''' % (label, mr, sr, mm, sm))

    #---

    # increment grid size
    num *= 2

for key, val in summary.items():
    summary[key] = np.array(val)

#------------------------

# make plots of scaling with grid size
if args.verbose:
    print('plotting')

fig = plt.figure()
axr = plt.subplot(2,1,1)
axm = plt.subplot(2,1,2)

for label, color in [
        ('HaarArray.decompose', 'k'),
        ('HaarArray.idecompose', 'r')
    ]:
    labeled = False
    for ind, num in enumerate(summary['grid size']):
        mr, sr, mm, sm = summary[label][ind]

        num = np.log(num)

        _label = label if (not labeled) else None

        axr.plot(num, mr, marker='o', linestyle='none', markeredgecolor=color, markerfacecolor='none', label=_label)
        axr.plot([num]*2, [mr-sr, mr+sr], color=color)

        axm.plot(num, mm, marker='o', linestyle='none', markeredgecolor=color, markerfacecolor='none', label=_label)
        axm.plot([num]*2, [mm-sm, mm+sm], color=color)

        labeled = True

    # add expected scalings to guide the eye
    num = np.logspace(*np.log10(args.grid_range), 101)

    ### NOTE the following values might be fragile...

    # FIXME I am not confident in how the runtime should scale. Perhaps cubic with the number of grid points?
#    axr.plot(np.log(num), 1e0*np.log(num)/np.log(16), color='b', alpha=0.25, label='expected scaling')
#    axr.plot(np.log(num), 2e0*(num/32)**2, color='b', alpha=0.25)
    axr.plot(np.log(num), 2e0*(num/32)**3, color='b', alpha=0.25, label='expected scaling')

    # memory should scale with the total number of grid points
    axm.plot(np.log(num), 1e3*(num/32)**3, color='b', alpha=0.25)

# decorate

axr.legend(loc='upper left')

for ax in fig.axes:

    ax.set_yscale('log')

    ax.set_xlim(
        xmin=np.log(max(1, args.grid_range[0]/1.1)),
        xmax=np.log(args.grid_range[1]*1.1),
    )

    ax.tick_params(
        left=True,
        right=True,
        top=True,
        bottom=True,
        which='both',
        direction='in',
    )

    ax.grid(True, which='both')

plt.subplots_adjust(
    left=0.10,
    right=0.95,
    top=0.95,
    bottom=0.10,
    hspace=0.05,
)

axm.set_xticks(np.log(summary['grid size']))
axm.set_xticklabels(['%d'%_ for _ in summary['grid size']])
axm.set_xlabel('1D grid size')
axm.set_ylabel('memory [kB]')

axr.set_xticks(axm.get_xticks())
plt.setp(axr.get_xticklabels(), visible=False)
axr.set_ylabel('runtime [ms]')

# save
figname = os.path.join(args.output_dir, 'test-scaling%s.png' % args.tag)
if args.verbose:
    print('    saving: '+figname)
fig.savefig(figname)
plt.close(fig)

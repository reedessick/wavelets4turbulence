#!/usr/bin/env python3

"""a simple testing script to figure out syntax and which calculations are useful
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import tracemalloc
import time

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from w4t import haar
import utils # local!

#-------------------------------------------------

fields = ['field']

#-------------------------------------------------

parser = ArgumentParser()

#---

parser.add_argument('-n', '--num-grid', type=int, default=32,
    help='the number of grid points used when constructing random data instead of reading from --path')

parser.add_argument('--seed', default=None, type=int)

#---

parser.add_argument('-N', '--num-trials', default=10, type=int,
    help='the number of trials to run for timing tests')

#---

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

#---

args = parser.parse_args()

args.verbose |= args.Verbose

#-------------------------------------------------

utils.seed(args.seed, verbose=args.verbose)

#-------------------------------------------------

data = utils.load(
    fields,
    num_grid=args.num_grid,
    verbose=args.verbose,
)

#-------------------------------------------------

for field in fields:
    if args.verbose:
        print('testing field=%s with %d trials' %(field, args.num_trials))

    if (data[field].shape[0] > 1) and args.Verbose:
        print('WARNING: only examining index 0 of field')

    # instantiate
    ha = haar.HaarArray(data[field][0])

    # take decompositions to and estimate how long they take to run
    decomp = []
    decomp_mem = []

    idecomp = []
    idecomp_mem = []

    for trial in range(args.num_trials):
        for foo, run, mem in [
                (ha.decompose, decomp, decomp_mem),
                (ha.idecompose, idecomp, idecomp_mem),
            ]:
            tracemalloc.start()
            t0 = time.time()
            foo()
            run.append(time.time()-t0)
            current, peak = tracemalloc.get_traced_memory()
            mem.append(peak)
            tracemalloc.stop()

    del ha

    # report
    for label, run, mem in [
            ('decompose', decomp, decomp_mem),
            ('idecompose', idecomp, idecomp_mem),
        ]:
        print('''%s
    runtime = %.6f +/- %.6f ms
    memory  = %.1f +/- %.1f KB''' % (label, np.mean(run)*1e3, np.std(run)*1e3, np.mean(mem)/1e3, np.std(mem)/1e3))
